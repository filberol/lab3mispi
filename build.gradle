plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.6.20'
//    id 'org.jetbrains.kotlin.multiplatform' version '1.8.21'
    id 'org.jetbrains.kotlin.plugin.allopen' version '1.6.20'
    id 'org.jetbrains.kotlin.plugin.noarg' version '1.6.20'
    id("org.jetbrains.dokka") version "1.8.10"
    id 'war'
}

group 'com.lab3web'
version '1.0-SNAPSHOT'

repositories { mavenCentral() }

dependencies {
    // Jpa
    implementation('jakarta.platform:jakarta.jakartaee-api:9.1.0')
    implementation('jakarta.mvc:jakarta.mvc-api:2.0.0')
    implementation('org.eclipse.persistence:org.eclipse.persistence.jpa:3.0.3')

    // Don't update
    implementation("org.hibernate.common:hibernate-commons-annotations:5.1.2.Final")
    implementation("org.hibernate:hibernate-core:5.6.10.Final")

    // Hibernate
    implementation('org.hibernate.validator:hibernate-validator:8.0.0.Final')
    implementation('org.postgresql:postgresql:42.5.1')

    // Front
    implementation("org.primefaces:primefaces:12.0.0:jakarta")

    // Tests
    testImplementation('org.junit.jupiter:junit-jupiter:5.9.2')
}

[compileKotlin, compileTestKotlin].forEach {
    it.kotlinOptions {
        jvmTarget = jvm_target
        allWarningsAsErrors = all_as_errors
    }
}

// Register commands

tasks.register("compile_m") {
    group "mispi_tasks"
    buildDir = "build"
    dependsOn {
        compileKotlin
    }
    doLast {
        println("Compiled kotlin into $buildDir")
    }
}

tasks.register("build_m", War) {
    group "mispi_tasks"
    dependsOn {
        compile_m
    }
    manifest {
        "Manifest-Version: 1.0"
    }
    archiveBaseName = "deployment"
    archiveAppendix = ""
    archiveVersion = ""
    doLast {
        println("Build war package in $buildDir")
    }
}

tasks.register("clean_m", Delete) {
    group "mispi_tasks"
    delete buildDir
    doLast {
        println("Clean bild directory")
    }
}

tasks.register("music_m", Exec) {
    group "mispi_tasks"
    dependsOn { build_m }
    // Platform dependency
    commandLine 'powershell', '-c', '(New-Object Media.SoundPlayer "sound.wav").PlaySync();'
    doLast {
        println("Party time!")
    }
}

tasks.register("stage_test", Exec) {
    group "git_utils"
    workingDir "."
    commandLine 'powershell', '-c', 'git add src/test/test-junit-xml/TEST-Tests.xml'
}

tasks.register("report_m", Exec) {
    group "mispi_tasks"
    dependsOn {
        test
        stage_test
    }
    commandLine 'powershell', '-c', "git commit -m 'Junit Report $version'"
    doLast {
        println("Generated and comminted Junit Report for version $version")
    }
}

tasks.register("xml_m") {
    group "mispi_tasks"
    doLast {
        ant.xmlvalidate(lenient: true, failonerror: true, warn: true) {
            fileset(
                    dir: project.projectDir
            ) {
                include(name: '**/*.xml')
                exclude(name: 'build/**')
            }
        }
    }
}

tasks.register("doc_m") {
    group "mispi_tasks"
    dependsOn { build_m }
    doFirst {
        ant.checksum(
                file: "$buildDir/libs/$depl_name",
                algorithm: 'SHA1',
                fileext: '.sha1',
                forceoverwrite: 'true'
        )
    }
    dependsOn {
        xml_m
        dokkaHtml
    }
}

tasks.register("test_m", Test) {
    group "mispi_tasks"
    doFirst {
        println("Processing tests for version $version...")
    }
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    reports {
        junitXml.outputLocation.set(layout.buildDirectory.dir("../src/test/test-junit-xml"))
    }
}

tasks.register("scp_m") {
    group "mispi_tasks"
    dependsOn {
        build_m
    }
    doLast {
        exec {
            workingDir '.'
            commandLine 'powershell', '-c', "scp -P $ssh_port build/libs/$depl_name $ssh_username@$ssh_host:~"
        }
    }
    doLast {
        println("Deployed ")
    }
}

tasks.register("env_m") {
    group "mispi_tasks"
    targetCompatibility = alt_jvm_target
    dependsOn { build_m }
    doLast {
        println("Built env 'war' for jvm_version $alt_jvm_target")
    }
}

["master", "-"].eachWithIndex { branch, num ->
    tasks.register("checkout_$num", Exec) {
        group "git_utils"
        commandLine 'powershell', '-c', "git checkout $branch"
    }
}

["master", "-"].eachWithIndex { branch, num ->
    tasks.register("copy_deployment_$num", Copy) {
        group "git_utils"
        dependsOn {
            "checkout_$num"
        }
        from("$buildDir/libs/$depl_name")
        into("deployments/$num")
        finalizedBy {
            build_m
        }
    }
}

tasks.register("collect_deployments") {
    group "git_utils"
    dependsOn {
        copy_deployment_1
        copy_deployment_0
    }
    doLast {
        println("Built and collected deployments.")
    }
}

tasks.register("team_m", Zip) {
    group "mispi_tasks"
    dependsOn {
        collect_deployments
    }
    from("deployments")
    into("archives")
    archiveBaseName = "archived_deploys"
    includeEmptyDirs = true
    doLast {
        println("Created archive.")
    }
}

tasks.register("alt_m") {
    group "mispi_tasks"
    project.mkdir "${altSrc}${altPackage}"
    copy {
        from "${src}${packagee}"
        include "*"
        include "**/*.kt"
        include "**/**/*"
        into "${altSrc}${altPackage}"
    }
    copy {
        from "${test}"
        include "*"
        into "${altTest}"
    }
    ant.replaceregexp(file: "${altSrc}${altPackage}/kotlin/beans/RequestBean.kt", match: 'personalBean', replace: 'personalBean_m', flags: 'g', byline: true)
    ant.replaceregexp(file: "${altSrc}${altPackage}/kotlin/beans/PersonalBean.kt", match: 'connectBean', replace: 'connectBean_m', flags: 'g', byline: true)
    dependsOn(build_m)
}

