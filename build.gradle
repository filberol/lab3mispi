import org.gradle.internal.xml.XmlValidation

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.6.20'
    id 'org.jetbrains.kotlin.plugin.allopen' version '1.6.20'
    id 'org.jetbrains.kotlin.plugin.noarg' version '1.6.20'
    id 'war'
}

group 'com.lab3web'
version '1.0-SNAPSHOT'

repositories { mavenCentral() }

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

[compileKotlin, compileTestKotlin].forEach {
    it.kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    // Jpa
    implementation('jakarta.platform:jakarta.jakartaee-api:9.1.0')
    implementation('jakarta.mvc:jakarta.mvc-api:2.0.0')
    implementation('org.eclipse.persistence:org.eclipse.persistence.jpa:3.0.3')

    // Dont update
    implementation("org.hibernate.common:hibernate-commons-annotations:5.1.2.Final")
    implementation("org.hibernate:hibernate-core:5.6.10.Final")

    // Hibernate
    implementation('org.hibernate.validator:hibernate-validator:8.0.0.Final')
    implementation('org.postgresql:postgresql:42.5.1')

    // Front
    implementation("org.primefaces:primefaces:12.0.0:jakarta")

    // Tests
    testImplementation("org.junit.jupiter:junit-jupiter:5.8.2")

    //GitLib
//    classpath 'org.ajoberstar:gradle-git:1.6.0'

}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        allWarningsAsErrors = true
    }
}

// Register commands

tasks.register("compile_m") {
    group "mispi_tasks"
    buildDir = "build"
    dependsOn(compileKotlin)
    doLast {
        println("Compiled kotlin into $buildDir")
    }

}

tasks.register("build_m", War) {
    group "mispi_tasks"
    dependsOn { compile_m }
    manifest {
        "Manifest-Version: 1.0"
    }
    archiveBaseName = "deployment"
    archiveAppendix = ""
    archiveVersion = ""
    doLast {
        println("Build war package in $buildDir")
    }
}

tasks.register("clean_m", Delete) {
    group "mispi_tasks"
    delete buildDir
    doLast {
        println("Clean bild directory")
    }
}

//tasks.register("music_m", Exec) {
//    group "mispi_tasks"
//    dependsOn(build_m)
//    // Platform dependency
//    commandLine {
//        "powershell -c (New-Object Media.SoundPlayer 'sound.wav').PlaySync();"
//    }
//    doLast {
//        println("Party time!")
//    }
//}


tasks.register("commit", Exec){
    commandLine 'powershell', '/c', 'git commit -m \'newReport\''
}

tasks.register("report", Exec) {
    group "mispi_tasks"
    dependsOn(test)

    commandLine 'cmd', '/c', 'git add src/test/test-junit-xml/'
//    exec { executable = "cmd" args = "/C", "echo Hello World" }
//    commandLine 'cmd', '/c', 'git commit -m "Added report JUnit" '
//    commandLine 'cmd', '/c', 'git commit -a'
    dependsOn(commit)
}

tasks.register("xml_m") {
    group "mispi_tasks"
    doLast {
        ant.xmlvalidate(lenient:true, failonerror:true, warn:true) {
            fileset(
                    dir: project.projectDir
            ) {
                include(name: '**/*.xml')
                exclude(name: 'build/**')
            }
        }
    }
}

tasks.register("doc_m") {
    group "mispi_tasks"
    dependsOn { build_m }
    doFirst {
        ant.checksum(
                file:"$buildDir/libs/deployment.war",
                algorithm:'SHA1',
                fileext:'.sha1',
                forceoverwrite: 'true'
        )
    }
    dependsOn { xml_m }
    dependsOn { dokkaHtml }
}

test {
    group "mispi_tasks"
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    reports {
        junitXml.outputLocation.set(layout.buildDirectory.dir("../src/test/test-junit-xml"))
    }
}